<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>二、线性表</title>
    <link href="/7682ef9a/"/>
    <url>/7682ef9a/</url>
    
    <content type="html"><![CDATA[<!--请求图片资源时，隐藏自己的来源信息，防止出现403错误导致图床图片不显示--><meta name="referrer" content="no-referrer" /><h2 id="一线性表的定义和基本操作">一、线性表的定义和基本操作</h2><h3 id="线性表的定义">1.1、线性表的定义</h3><p><strong>线性表</strong>是有<strong>相同数据类型</strong>的n个<strong>数据元素</strong>的<strong>有限序列</strong>。其中n为表长，一般表示为L = (a1,a2,a3,...,an)。</p><p>从线性表的定义可以看出，线性表的特点：</p><ul><li>表中元素的数据类型相同，每个元素占有相同大小的存储空间。</li><li>表中元素都是数据元素，每个元素都是单个元素。</li><li>表中的元素个数有限。</li><li>表中元素具有逻辑上的顺序性，表中元素有其先后顺序。</li></ul><blockquote><p>线性表是一种<em>逻辑结构</em>，表示元素之间一对一的相邻关系。</p><p>顺序表和链表是指<em>存储结构</em>，是线性表不同存储结构下的实现。</p></blockquote><h3 id="线性表的基本操作">1.2、线性表的基本操作</h3><p>基本操作：创销、增删、查</p><ul><li>initList(&amp;L)：初始化表</li><li>destoryList(&amp;L)：销毁操作</li><li>listInsert(&amp;L,i,e) : 插入元素，在第i个位置插入元素e</li><li>listDelete(&amp;L,i,&amp;e)：删除第i个位置的元素，并用e返回删除元素的值。</li><li>getElem(L,i)：按位查找，获取表中第i个位置的元素值</li><li>locateElem(L,e)：按值查找，在表中查找具有给定关键字值的元素</li><li>empty(L)：判空</li><li>length(L)：获取表长</li><li>printList(L)：按顺序输出表中元素的值</li></ul><h2 id="二顺序表">二、顺序表</h2><h3 id="顺序表的定义">2.1、顺序表的定义</h3><p>​ 线性表的顺序表示 --- 顺序表：用一组<strong>地址连续</strong>的存储单元依次存储线性表中的数据元素，使得在逻辑上相邻的元素在物理位置上也相邻。</p><p>​ 若线性表L存储的起始地址为 LOC(A)，则第i个元素存储的起始地址为 LOC(A)+ (i - 1) * sizeof(ElemType)。</p><blockquote><p>注：线性表中元素的位序是从1开始的，而数组元素的下标是从0开始的。</p></blockquote><h3 id="顺序表的存储结构">2.2、顺序表的存储结构</h3><p>顺序表使用一维数组存储数据元素，该数组可以是<strong>静态分配</strong>的，也可以是<strong>动态分配</strong>的。</p><p>静态分配：</p><p>数组的大小已事先确定，一旦空间占满，再加入新的数据将会产生溢出，进而导致程序崩溃。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxSize 50</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    ElemType data[MaxSize];<br>    <span class="hljs-type">int</span> lenght;<span class="hljs-comment">//顺序表的当前长度</span><br>&#125;SqList;<br><br>SqList L;<br><span class="hljs-built_in">initList</span>(L); <span class="hljs-comment">//由于会有脏数据，初始化时表当当前长度lenght必须设置为0</span><br><span class="hljs-comment">//其他操作</span><br></code></pre></td></tr></table></figure><p>​</p><p>动态分配：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> InitSize 100</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    ElemType *data;<br>    <span class="hljs-type">int</span> MaxSize, length;<span class="hljs-comment">//数组的最大容量和当前个数</span><br>&#125; SeqList;<br><br>SeqList L; <span class="hljs-comment">//系统在内存中开辟了包含 *data,MaxSize,length这些变量的存储空间</span><br><span class="hljs-built_in">initList</span>(L); <span class="hljs-comment">//初始化，给以上变量赋值</span><br><br><br><span class="hljs-comment">//初始化</span><br>L.data = (ElemType *) <span class="hljs-built_in">malloc</span> (<span class="hljs-built_in">sizeof</span>(ElemType) * InitSize);<br></code></pre></td></tr></table></figure><ul><li><p>此时存储空间不是在一开始就确定的，而是在程序执行过程中，在数组初始化过程通过动态存储分配语句分配的，一旦数据空间占满，就<strong>另开辟一块更大的空间，将数据元素拷贝过去，释放原来的空间</strong>，从而达到扩容的目的，而不用为线性表一次划分所有空间。</p></li><li><p><strong>动态分配方式不是链式存储</strong>，同样属于顺序存储结构，其物理结构没有发生变化，依然是随机存取方式，只是分配的空间大小可以在运行时决定。</p></li></ul><h3 id="顺序表的特点">2.3、顺序表的特点</h3><ul><li><p><strong>随机访问</strong>：可以在 <em>O(1)</em>内找到第i个元素</p></li><li><p>存储密度高，每个结点只存储数据元素，不用像链表那样消耗空间存储指针。</p></li><li><p>扩容不方便，<strong>静态分配不可以扩容，动态分配扩容时间复杂度也很高</strong></p></li><li><p>插入删除元素不方便，需要大量移动元素</p></li><li><p>由于难以估计所需空间的大小，必须预先分配较大的空间，往往使空间不能得到充分利用。</p></li></ul><h3 id="顺序表上基本操作的实现">2.4、顺序表上基本操作的实现</h3><p>​ 插入操作：在顺序表L的第i个位置 (<strong>1&lt;= i &lt;=L.length+1)</strong> 插入元素e，成功返回true，否则返回false。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">insertList</span> <span class="hljs-params">(SqList &amp;L, <span class="hljs-type">int</span> index, <span class="hljs-type">int</span> data)</span> </span>&#123;<br>    <span class="hljs-comment">//顺序表中，可以插入的位置 为 [1,length+1], index 为位序</span><br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">1</span> || index &gt; L.length<span class="hljs-number">+1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span> (index &gt;= Maxsize)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">//从最后一个位置的元素开始，将位置index 到 length的元素都向后移动：移动元素个数为 length - index + 1</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = L.length; i &gt;= index; i--) &#123;<br>        L.data[i] = L.data[i<span class="hljs-number">-1</span>];<br>    &#125;<br>    L.data[index - <span class="hljs-number">1</span>] = data;<br>    L.length ++;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​ 删除操作：删除顺序表L中第i个位置 ( <strong>1&lt;= i &lt;=L.length</strong>)，若成功删除返回true，并将被删除元素用引用变量e返回。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">deleteList</span> <span class="hljs-params">(SqList &amp;L, <span class="hljs-type">int</span> index, <span class="hljs-type">int</span> &amp;data)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">1</span> || index &gt; L.length)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    data = L.data[index];<br>    <span class="hljs-comment">//从第index+1个位置开始，将其后的元素向前移动，移动元素个数为： length - index</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = index; i &lt; L.length; i++) &#123;<br>        L.data[i<span class="hljs-number">-1</span>] = L.data[i];<br>    &#125;<br>    L.length --;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三链表">三、链表</h2><p>线性表的链式表示 --- 链表</p><h3 id="单链表的定义">3.1、单链表的定义</h3><p>​它通过一组<strong>任意</strong>的存储单元来存储线性表中的数据元素。为了建立数据元素之间的线性关系，对每个链表结点，除了存放元素自身的信息外，还需存放一个指向其后继的<strong>指针</strong>。</p><p>单链表的结点结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Lnode</span> &#123;</span><br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Lnode</span> *<span class="hljs-title">next</span>;</span><br>&#125;<br><br><span class="hljs-comment">//增加一个新结点</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Lnode</span> *<span class="hljs-title">p</span> =</span> (<span class="hljs-keyword">struct</span> Lnode *)<span class="hljs-built_in">malloc</span>(siezof(<span class="hljs-keyword">struct</span> Lnode));<br></code></pre></td></tr></table></figure><p>为了在编写代码时不用带上 struct 关键字，使用 typedef 关键字对该数据类型 重命名。 typedef <数据类型 > <别名></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Lnode</span> &#123;</span><br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Lnode</span> *<span class="hljs-title">next</span>;</span><br>&#125;Lnode, *LinkList;<br><br><span class="hljs-comment">//增加一个新结点</span><br>Lnode *p = (Lnode *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Lnode));<br><span class="hljs-comment">//声明一个单链表</span><br>LinkList L;<br>  <br></code></pre></td></tr></table></figure><p>通常用一个<strong>头指针</strong>来标识一个单链表，如单链表L。为了操作方便，在单链表的第一个结点之前附加一个结点，称为<strong>头结点</strong></p><p>二者区别：不管带不带头结点，<strong>头指针始终指向链表的第一个结点</strong>，而头结点是带头结点的链表中第一个结点，节点内通常不存储信息。头结点的指针域指向线性表的第一个元素结点。<strong>可以没有头结点，但不能没有头指针</strong>。</p><p>引入头结点带来的优点：</p><ul><li>让链表在第一个位置的操作和在表其他位置的操作保持一致。若不带头结点，每次插入或删除第一个元素时，需要改变头指针L的指向，要单独处理。</li><li>无论链表是否为空，头指针都指向头结点的非空指针（空表中头结点指针域为空），让空表和非空表的操作的到了统一。</li></ul><h3 id="单链表上基本操作的实现">3.2、单链表上基本操作的实现</h3><h4 id="头插法建立单链表">头插法建立单链表</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//带头结点</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">createList_L</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-comment">//用头插法逆序建立带头结点的单链表</span><br>    L = (LinkList) <span class="hljs-built_in">malloc</span> (<span class="hljs-built_in">sizeof</span>(LNode));<br>    <span class="hljs-keyword">if</span>(!L) <span class="hljs-built_in">exit</span>(<span class="hljs-string">&quot;OVERFLOW&quot;</span>); <span class="hljs-comment">//申请失败，返回内存溢出</span><br>    L-&gt;next = null;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        p = (LinkList) <span class="hljs-built_in">malloc</span> (<span class="hljs-built_in">sizeof</span>(LNode));<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;p-&gt;data);<br>        p-&gt;next = L-&gt;next;<br>        L-&gt;next = p;<br>    &#125;    <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//不带头结点</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">createList_L</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    L = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        p = (LinkList) <span class="hljs-built_in">malloc</span> (<span class="hljs-built_in">sizeof</span>(LNode));<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;p-&gt;data);<br>        p-&gt;next = L;<br>        L = p; <span class="hljs-comment">//头指针指向第一个元素结点</span><br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="尾插法建立单链表">尾插法建立单链表</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//带头结点</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(LinkList &amp;L)</span> </span>&#123;<br>    <span class="hljs-comment">//创建头结点</span><br>    L = (LNode *) <span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(LNode));<br>    LNode *r = L; <span class="hljs-comment">//尾指针</span><br>    <span class="hljs-type">int</span> data = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;data);<br>    <span class="hljs-keyword">while</span> (data != <span class="hljs-number">9999</span>) &#123; <span class="hljs-comment">// 输入结点值为9999时停止创建</span><br>        LNode *node = (LNode *) <span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span> (LNode));<br>        node-&gt;data = data;<br>        r-&gt;next = node;<br>        r = node;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;data);<br>    &#125;<br>    r-&gt;next = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">//不带头结点</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(LinkList &amp;L)</span> </span>&#123;<br>    L = <span class="hljs-literal">NULL</span>;<br>    LNode *r = L;<br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;data);<br><br>    <span class="hljs-keyword">while</span> (data != <span class="hljs-number">9999</span>) &#123; <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;data为 %d&quot;</span>,data);<br>        LNode *node = (LNode *) <span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span> (LNode));<br>        node-&gt;data = data;<br>        node-&gt;next = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;data);<br>        <span class="hljs-keyword">if</span> (L == <span class="hljs-literal">NULL</span>) &#123; <span class="hljs-comment">//第一个结点单独创建，此时需要改变头指针的指向</span><br>            L = node;<br>            r = L;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        r-&gt;next = node;<br>        r = node;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="在第i个位置插入元素">在第i个位置插入元素</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//带头节点</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">listInsert</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-type">int</span> index, <span class="hljs-type">int</span> data)</span> </span>&#123;<br>    <span class="hljs-comment">//找到第 index - 1个结点，插在其后</span><br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">1</span> ) <span class="hljs-comment">//位序从1开始</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    LNode *p = L;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (p &amp;&amp; j &lt; index - <span class="hljs-number">1</span>) &#123;<br>        p = p-&gt;next;<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>) &#123;<span class="hljs-comment">//index不合法，超出当前链表最大长度+1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    LNode * node = (LNode*) <span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span> (LNode));<br>    node-&gt;data = data;<br>    node-&gt;next = p-&gt;next;<br>    p-&gt;next = node;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//不带头结点</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">listInsert</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-type">int</span> index, <span class="hljs-type">int</span> data)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (index == <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">//在头部插入，需要单独处理</span><br>        LNode *node = (LNode *) <span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span> (LNode));<br>        node-&gt;data = data;<br>        node-&gt;next = L;<br>        L = node;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <br>    <br>    LNode *p = L;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; <span class="hljs-comment">// 此时j从1开始</span><br>    <span class="hljs-keyword">while</span> (p &amp;&amp; j &lt; index - <span class="hljs-number">1</span>) &#123;<br>        p = p-&gt;next;<br>        j ++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    LNode *node = (LNode *) <span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span> (LNode));<br>    node-&gt;data = data;<br>    node-&gt;next = p-&gt;next;<br>    p-&gt;next = node;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="指定结点的后插操作">指定结点的后插操作</h4><p>带头结点和不带头结点的单链表操作相同，在给定结点不为空的前提下，申请一个新的结点，将其插在当前结点之后</p><h4 id="指定结点的前插操作">指定结点的前插操作</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">指定结点的前插操作 相当于 指定结点的前驱的后插操作</span><br><span class="hljs-comment">1、传入头指针</span><br><span class="hljs-comment">从头遍历链表找到当前结点的前驱，在其后插入新结点。不带头结点的单链表在第一个结点前插入时要单独处理。</span><br><span class="hljs-comment">2、不传入头指针</span><br><span class="hljs-comment">在当前结点后插入新结点，将新结点的数据和当前结点的数据交换，达到前插的 “效果”</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//不带头结点</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">insertPriorNode</span><span class="hljs-params">(LinkList L, LNode *p, <span class="hljs-type">int</span> data)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (L == <span class="hljs-literal">NULL</span> || p == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <br>    <span class="hljs-comment">/* 不带头结点的链表 多 一个判断是否在第一个结点执行前插操作的判断，单独处理该情况，其余操作均相同*/</span><br>    LNode *q = L;<br>    <span class="hljs-keyword">while</span>(q-&gt;next != p) &#123; <span class="hljs-comment">//寻找p的前驱</span><br>        q = q-&gt;next;<br>    &#125;<br><br>    LNode *node = (LNode *) <span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span> (LNode));<br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    node-&gt;data = data;<br>    q-&gt;next = node;<br>    node-&gt;next = p;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="按位序删除">按位序删除</h4><p>主要是找到待删除结点的前驱和后继，将其后继作为前驱的后继，并将当前结点删除。若i值不合法找不到第i-1个结点或第i个结点已经为NULL，删除失败。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//带头节点</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">listDelete</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-type">int</span> index, <span class="hljs-type">int</span> &amp;data)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">1</span> || L == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">/*若是不带头结点的单链表，判断index是否等于1.单独处理*/</span><br>    <br>    LNode *pre = L, *p = L-&gt;next;<br>    <span class="hljs-keyword">while</span> (-- index &amp;&amp; p) &#123; <span class="hljs-comment">//寻找第index-1个结点</span><br>        pre = p;<br>        p = p -&gt; next;<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>) <span class="hljs-comment">//i值不合法</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span> (p-&gt;next == <span class="hljs-literal">NULL</span>) <span class="hljs-comment">//p已经是最后一个结点</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <br>    LNode *q = p-&gt;next;<br>    data = q-&gt;data;<br>    p-&gt;next = q-&gt;next;<br>    <span class="hljs-built_in">free</span>(q);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//不带头结点</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">若删除的是第一个结点 (index = 1)，需要改变头指针的指向，需要单独处理</span><br><span class="hljs-comment">寻找第i-1个结点时， j从1开始，其余操作和不带头结点的相同</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="指定结点p的删除">指定结点p的删除</h4><ul><li>若传入头指针，循环寻找p的前驱，将后继作为前驱的后继</li><li>若不传入头指针，将p和p的后继节点数据交换后，删除后继。&lt;注：若p是最后一个结点时会出错&gt;</li></ul><h3 id="双链表">3.4、双链表</h3><p>​单链表中只有一个指向其后继的指针，使得单链表只能从头结点依次顺序地向后遍历。访问某个结点的前驱结点时只能从头开始遍历，其时间复杂度为<em>O(n)</em>，访问其后继节点的时间复杂度为<em>O(1)</em>。</p><p>​为了克服单链表的上述缺点，引入了双链表。双链表的插入和删除时间复杂度都为<em>O(1)</em>，按值查找和按位查找都需要遍历链表，时间复杂度都为<em>O(n)。</em></p><p>​ 双链表结点中含有两个指针prior 和next，分别指向其前驱和后继结点。</p><p><img src="https://gitee.com/cmyk359/img/raw/master/img/image-20221020091225136-2024-12-615:11:00.png" alt="image-20221020091225136" style="zoom:67%;" /></p><p>其结点结构类型如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">DNode</span> &#123;<br>    ElemType data;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Dnode</span> *prior, *next;<br>&#125;DNode, *DLinkList;<br></code></pre></td></tr></table></figure><h4 id="双链表的插入操作">双链表的插入操作</h4><p><img src="https://gitee.com/cmyk359/img/raw/master/img/image-20221020091611880-2024-12-615:15:34.png" alt="image-20221020091611880" style="zoom: 67%;" /></p><p>在p之后插入新结点，其中第1、2步必须在第4步之前，否则就会丢失p的后继节点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//先处理好插入节点和p结点后继结点的关系</span><br><span class="hljs-number">1.</span> p-&gt;next-&gt;prior = s;<br><span class="hljs-number">2.</span> s-&gt;next = p-&gt;next;<br><span class="hljs-comment">//再处理插入结点和p结点的关系</span><br><span class="hljs-number">3.</span> s-&gt;prior = p;<br><span class="hljs-number">4.</span> p-&gt;next = s;<br><br><span class="hljs-comment">//注意边界，当对最后一个结点进行后插操作时，需要特殊处理，直接使用上述代码会出错</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">insertDNode</span><span class="hljs-params">(DNode *p, DNode *s)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span>(p-&gt;next != <span class="hljs-literal">NULL</span>) &#123; <span class="hljs-comment">//若p结点有后继结点</span><br>        p-&gt;next-&gt;prior = s;<br>    &#125;<br>    s-&gt;next = p-&gt;next;<br>    s-&gt;prior = p;<br>    p-&gt;next = s;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p>实现了双链表的后插操作后，其他插入操作如按位序i插入（找到第i-1个结点，执行后插操作）和某结点的前插操作（其前驱结点的后插操作都可以转化为后插操作。</p><h4 id="双链表的删除操作">双链表的删除操作</h4><p><img src="https://gitee.com/cmyk359/img/raw/master/img/Snipaste_2022-10-20_09-25-23-2024-12-615:16:29.png" style="zoom: 67%;" /></p><p>删除p的后继结点：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//当p或p的后继为最后后一个结点时，该做法会出错</span><br>p-&gt;next = q-&gt;next;<br>q-&gt;next-&gt;prior = p;<br><span class="hljs-built_in">free</span>(q);<br><br><span class="hljs-comment">//注意边界，当被删除结点为最后一个结点时要特殊处理。</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">deleteDNode</span><span class="hljs-params">(DNode *p)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    DNode *q = p-&gt;next;<br>    <span class="hljs-keyword">if</span> (q == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">//p没有后继</span><br>    p-&gt;next = q-&gt;next;<br>    <span class="hljs-keyword">if</span>(q-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>        q-&gt;next-&gt;prior = p;<br>    &#125;<br>    <span class="hljs-built_in">free</span>(q);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="循环链表">3.5、循环链表</h3><h4 id="循环单链表">循环单链表</h4><p><img src="https://gitee.com/cmyk359/img/raw/master/img/image-20221020095402713-2024-12-615:20:17.png" alt="image-20221020095402713" style="zoom:67%;" /></p><p>初始化： <code>L-&gt;next = L</code></p><p>判空：<code>L-&gt;next == L</code></p><p>判断是否为表尾结点 : <code>p-&gt;next == L</code></p><p>在单链表中只能从表头结点开始往后顺序遍历整个链表，而循环单链表可以从表中的任一结点开始遍历整个链表。</p><p><strong>对于只设置头指针的循环单链表，其要找到表尾结点的时间复杂的仍为<em>O(n)</em>，需要依次遍历整个链表。故通常为循环单链表不设头指针而仅设置尾指针</strong></p><h4 id="循环双链表">循环双链表</h4><p><img src="https://gitee.com/cmyk359/img/raw/master/img/image-20221020100322600-2024-12-615:20:39.png" alt="image-20221020100322600" style="zoom:67%;" /></p><p>初始化： <code>L-&gt;next = L; L-&gt;prior = L;</code></p><p>判空： <code>L-&gt;next == L</code></p><p>判断是否为表尾结点： <code>p-&gt;next == L</code></p><p>对循环双链表的插入和删除操作和普通双链表基本相同，且不用考虑边界情况。</p><h3 id="静态链表">3.6、静态链表</h3><h2 id="四链表相关的算法题目">四、链表相关的算法题目</h2>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>线性表</tag>
      
      <tag>单链表</tag>
      
      <tag>双链表</tag>
      
      <tag>循环链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一、绪论</title>
    <link href="/bfab103e/"/>
    <url>/bfab103e/</url>
    
    <content type="html"><![CDATA[<!--请求图片资源时，隐藏自己的来源信息，防止出现403错误导致图床图片不显示--><meta name="referrer" content="no-referrer" /><h2 id="一数据结构的基本概念">一、数据结构的基本概念</h2><p><img src="https://gitee.com/cmyk359/img/raw/master/img/image-20220902165335043-2024-12-610:07:40.png" alt="image-20220902165335043" style="zoom:80%;" /></p><h3 id="基本概念">1.1、基本概念</h3><p>用数据库中的相关概念来理解，数据相当于一个数据库，数据对象相当于一个表，数据元素相当于表中的一条记录，数据项相当于一条记录的诸多属性。</p><ul><li><p>数据</p><p>画家，用画笔来描述世界；音乐家，用音符来描述世界；计算机专业人员，用<strong>数据</strong>来描述世界。</p><p>数据是<strong>信息的载体</strong>，是描述客观事物属性的数、字符及所有能输入到计算机中并<strong>被计算机程序识别和处理</strong>的符号的集合。数据是计算机程序加工的原料。</p></li><li><p>数据元素 数据项</p><p>数据元素：是数据的<u><strong>基本单位</strong></u>，通常作为一个整体来考虑和处理。</p><p>数据项：一个数据元素可由若干个数据项组成，数据项是构成数据元素<strong>不可分割的最小单位</strong></p></li><li><p>数据对象 数据结构（都是描述<strong>数据元素之间</strong>的关系）</p><p>数据对象：是<strong>具有相同性质</strong>的数据元素的集合，是数据的一个子集。（强调数据元素具有相同性质）</p><p>数据结构：是相互之间存在一种或多种特定关系的数据元素的集合。（强调数据元素之间有什么关系---&gt;数据结构三要素）。不同的数据元素可以组成相同的数据结构，相同的数据元素也可以组成不同的数据结构。</p></li><li><p>数据类型 抽象数据类型</p><p>数据类型：是一个值的集合和定义在此集合上的一组操作的总称。如：bool类型，其值的集合为true和false，可以进行的操作有与、或、非......</p><ul><li>原子类型：其值不可再分的数据类型。如int、bool等。</li><li>结构类型：其值可以在分解成若干成分的数据类型。如struct类型。</li></ul><p>抽象数据类型：ADT，描述了数据的逻辑结构和抽象运算，通常用<strong>&lt; 数据对象，数据关系，基本操作集&gt;</strong>这样的三元组来表示，从而构成了一个完整的数据结构定义。只用数学化的语言定义数据的<u>逻辑结构和运算</u>，与具体的实现无关，只有当用实际的计算机实现时，才考虑其存储结构，如栈、队列。</p></li></ul><p><strong>讨论一种数据结构时，先定义其抽象数据类型，即先定义逻辑结构和运算，最后决定用什么存储结构来实现。</strong></p><p><img src="https://gitee.com/cmyk359/img/raw/master/img/image-20220902172218218-2024-12-610:13:11.png" alt="image-20220902172218218" style="zoom:80%;" /></p><h3 id="数据结构三要素">1.2、数据结构三要素</h3><ul><li><p><strong>逻辑结构</strong>：数据元素之间的逻辑关系是什么</p><ul><li>集合：各元素同属一个集合，别无其他关系</li><li>线性结构：一对一的关系</li><li>树状结构：一对多的关系</li><li>图状结构：多对多的关系</li></ul><p><img src="https://gitee.com/cmyk359/img/raw/master/img/image-20220902172832557-2024-12-610:14:26.png" alt="image-20220902172832557" style="zoom:80%;" /></p><blockquote><p>补充：</p><ol type="1"><li><p>数组：是线性表的推广，它的数据元素是一个线性表，每个数据元素结构相同</p><p>广义表：是线性表的推广，它的数据元素是一个线性表，但不同构，即或者是单元素或者线性表。</p><p>严格来讲，数组（二维）和广义表不属于线性结构</p></li><li><p>栈和队列是操作受限的线性表，而串是内容受限的线性表</p></li></ol></blockquote></li><li><p><strong>存储结构</strong>：如何用计算机表示数据元素之间的逻辑关系</p><ul><li>顺序存储：把逻辑结构上相邻的元素存储在物理位置也相邻的存储单元中。</li><li>链式存储：逻辑上相邻的元素在物理位置上可以不相邻，借助<strong>指针</strong>表示其逻辑关系</li><li>索引存储：需要建立附加的索引表</li><li>散列存储：根据元素的关键字直接计算出该元素的存储地址</li></ul></li><li><p><strong>数据的运算</strong></p><p>施加在数据上的运算包括<strong>运算的定义和实现</strong>。运算的定义是针对逻辑结构的，指出运算的功能；运算的实现是针对存储结构的，指出运算的具体操作步骤。</p></li></ul><blockquote><p>注：</p><p>1、数据的逻辑结构独立与其存储结构，而数据的存储结构是逻辑结构在计算机中的映射，不能独立于逻辑结构而存在。</p><p>2、存储数据时，不仅要存储各数据元素的值，而且要存储他们之间的关系。</p><p>3、两个不同的数据结构，他们的逻辑结构和存储结构有可能完全相同，数据运算也是数据结构的一个重要方面。如：二叉树和二叉排序树，链栈和链队列。</p><p>4、堆是数据元素的序列，存储在一维数组中，可以看成<strong>线性结构</strong></p><p>5、<strong>多型数据类型</strong>，栈、队列、树、图都是多型数据类型，其数据元素既可以是‘单型’（原子类型，如整数，布尔类型等），也可以是结构类型。</p><p>6、有序表是指关键字有序的线性表，仅描述数据间的逻辑关系，它可以链式存储也可以顺序存储，故属于逻辑结构。</p><p>7、算法代表对问题求解步骤的描述，而程序则是算法在计算机上的特定实现。程序不一定满足有穷性，如死循环。</p><p>8、数据结构的形式定义为一个二元组，Data-Struct = &lt;D,R&gt;，其中D是数据元素的有限集，R是D上关系的有限集；</p><p>​ 数据类型表示为 ： Data-Type = &lt;D, R, P&gt;； 抽象数据类型表示为ADT = &lt;D, R, P&gt;。其中D和R同上，P为定义的一组操作。</p></blockquote><h2 id="二算法和算法的评价">二、算法和算法的评价</h2><h3 id="算法">2.1、算法</h3><p><strong>算法（Algorithm）是对特定问题求解步骤的一般描述</strong>，它是指令的有限序列，其中的每条指令表示一个或多个操作。</p><p><strong>程序 = 数据结构 +算法</strong>，其中数据结构是要处理的信息，算法是处理信息的步骤。</p><h3 id="算法的五个特性">2.2、算法的五个特性</h3><p>不满足以上五个特性就不能称为算法。</p><ul><li>有穷性：一个算法必须总在执行有穷步之后结束，且每一步都可在有穷时间内完成。</li><li>确定性：算法中的每条指令必须有明确的含义，对于相同的输入只能得到相同的输出</li><li>可行性：算法中描述的操作都可以通过已经实现的基本运算执行有限次数来实现</li><li>输入：一个算法有零个或多个输入</li><li>输出：一个算法有一个或多个输出 （必须要有输出）</li></ul><h3 id="好的算法的特质">2.3、好的算法的特质</h3><p>算法的设计目标，从这几方面评价一个算法</p><ul><li>正确性</li><li>可读性</li><li>健壮性</li><li>高效率：算法的执行时间（用<strong>时间复杂度</strong>来刻画）</li><li>低存储量：算法执行过程中所需要的最大存储空间（用<strong>空间复杂度</strong>来刻画）正确性可读性健壮性高效率：算法的执行时间（用<strong>时间复杂度</strong>来刻画）低存储量：算法执行过程中所需要的最大存储空间（用<strong>空间复杂度</strong>来刻画）</li></ul><h3 id="时间复杂度">2.4、时间复杂度</h3><p>一个语句的频度是指该语句在算法中被执行的次数，算法中所有语句的频度之和记为<em>T(n)</em>,它是该算法<strong>问题规模n</strong>的函数，<strong>时间复杂度主要分析<em>T(n)</em>的数量级</strong>。采用<strong>事前分析估计的方法</strong>分析时间开销T(n)与问题规模n的关系。</p><p>​ 算法中基本运算（最深层循环内部的语句）的频度 <em>f(n)</em>和<em>T(n)</em>同数量级，因此通常采用算法中基本运算的频度来分析算法时间复杂度，记为<em>T(n) = O ( f(n) )</em>，其中 O表示同数量级，其严格的数学定义为：T(n)和f(n)为定义在正整数集合上的两个函数，则存在正常数C和n0，使得n&gt;n0时，都满足<strong>0 &lt; T(n) &lt;= C f(n)</strong>。</p><p>​<strong>算法的时间复杂度不仅依赖于问题的规模n，也取决于输入数据的性质</strong>，如在一个一维数组中查找给定值k。因此，有<strong>最好时间复杂度</strong>，<strong>最坏时间复杂度</strong>，<strong>平均时间复杂度</strong>（所有可能输入等概率出现的情况下，算法的期望运行时间）。</p><p>在分析一个算法时间复杂度时，频度f(n)中可能含有多项相加或相乘，有加法和乘法规则：</p><p>​ 加法规则：多项相加只保留最高阶的项，且系数变为1</p><p>​ 乘法规则：多项相乘结果为最终保留</p><blockquote><p>注：1、顺序执行的代码只会影响常数项，可以忽略</p><p>​2、只挑最深层循环中的一个基本语句分析它的执行次数与问题规模n的关系即可</p><p>​ 3、 如果有多层循环，只需关注最深层循环中基本语句的执行次数</p></blockquote><h3 id="空间复杂度">2.5、空间复杂度</h3><p>算法的空间复杂度 <em>S(n)</em>定义为该算法所耗费的存储空间，它是问题规模n的函数， 记为 <em>S(n) = O(g(n) )</em></p><ul><li>只需关注问题规模<strong>n相关的变量</strong>所耗费的存储空间</li><li>函数递归调用带来的内存开销，其空间复杂度 =递归调用的深度。有的算法各层调用时所需存储空间与n有关，所以不同。</li><li>算法原地工作是指算法所需的<strong>辅助空间为常量</strong>，即<em>O(1)</em></li></ul><h3 id="注意点">2.6、注意点</h3><p>1、算法优于算法，是一个宏观上的问题，比如飞机比火车快，程序执行时间的特例不构成反例。故在相同规模n下，时间复杂度为O(n)的算法在时间上总是优于时间复杂度为O(2^n)的算法。时间复杂度为<spanclass="math inline">\(O(1)\)</span>的算法是效率最高的算法。</p><p>2、对于多层循环嵌套的代码，其时间复杂度主要考察最深层代码频度的数量级。</p><ul><li><p>内层和外层没有联系</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++) &#123;<br>        x++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行次数 = 外层循环次数 * 内层循环次数 = n * m</p></li><li><p>内层和外层有联系</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">2</span>*i; j++) &#123;<br>        x++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行次数计算方法：从内存向外层加和 ,即</p><p><span class="math display">\[ \sum_{i=1}^n \sum_{j=1}^{2i}1=  \sum_{i=1}^n 2i=  2 * \frac{n(n+1)}{2} =  n(n+1)\]</span></p></li><li><p>对于递归函数的时间复杂度</p><p>分析每次递归调用是参数的变化规律，是每次规模减一（n-1），还是规模减半（<spanclass="math inline">\(\frac{n}{2}\)</span>）等，再寻找递归出口所规定的规模，得出递归的次数。通常时间复杂度度与地柜的调用次数相关。​</p><p>一个算法所需时间由下述递归方程表示，求该算法的时间复杂度 <spanclass="math display">\[T(n) = \begin{cases} \ 1,n=1\\ \ 2T(\frac{n}{2})+n, n&gt;1\end{cases}\]</span> ​ 解：<span class="math inline">\(T(n) = 2T(\frac{n}{2})+n =2(2T(\frac{n}{4})+\frac{n}{2})+n = 4T(\frac{n}{4})+2n\)</span></p></li></ul><p>​ <span class="math display">\[= 2^k T(\frac{n}{2^k})+ kn\]</span></p><p>​ <span class="math display">\[当  \frac{n}{2^k} = 1时为止，所以   =\log_2n,将k代入T(n)可得\]</span></p><p>​ <span class="math display">\[T(n)=n*T(1) +n * \log_2n = n +n\log_2n\]</span></p><p>​ 故：该递归函数的时间复杂的为 <spanclass="math inline">\(O(n\log_2n)\)</span></p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>算法基本概念</tag>
      
      <tag>时间复杂度</tag>
      
      <tag>空间复杂度</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
